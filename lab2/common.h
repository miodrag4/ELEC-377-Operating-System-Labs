//+
// File: common.h
//
// Purpose: Definitions for suport functions in common.c
//          used as part of ELEC 277 Lab 2.
//
// Copyright 2022 Iffy Maduabuchi, Thomas Dean
//-

#include <sys/mman.h>
#include <fcntl.h>
#include <semaphore.h>
#include <sys/stat.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <time.h>
#include <string.h>
#include <sys/time.h>
#include <pthread.h>
#include <math.h>

#define TRUE 1
#define FALSE 0

#define MAX_MACHINES 6

#define MINIMAL_CHECKSUM_ITRS 115000000ULL // iterations to run for performing checksums
#define BASIC_CHECKSUM_ITRS 230000000ULL
#define STRONG_CHECKSUM_ITRS 850000000ULL

// global access to argv[0] 
extern char * progname;

// array to convert machine id to hex char.
extern char machId[];

//---------------------------------------------------
// STRUCTURE DEFINITIONS ----------------------------
//---------------------------------------------------


// Structures used to build the shared memory structure


//------------------------------------------
// Status of a given machine
// The information given by the simulated
// monitors is the status (up/down), the number
// of processes, load factor, packets per second
// and discarded packets per second.
//------------------------------------------

struct status {
	// 0 offline
	// 1 online
	int machine_state;
	
	// other information
	int num_of_processes;
	float load_factor;
	int packets_per_second;
	int discards_per_second;
	unsigned timestamp;
};

// Slot in array of machines. Id of the machine
// is given by the slot number The machine status
// is stored in the status field.

struct statusNode { // status structure used for shared machine slot

	// flag for if the current entry has been
	// read by the summarize thread
	int read;

	// status of the remote machine
    int machine_state;
    
    // other information
    int num_of_processes;
    float load_factor;
    int packets_per_second;
    int discards_per_second;
    
    // time the status was updated
    unsigned timestamp;

};

// summary informatiaon. 
// computed by summary thread
// from status of individual machinesA

struct summary_info {

	// flag to indicate that no more updates to the summary will be made
	// printer thread uses it to determine when to exit
	int no_more_updates;

	// checksum generated by reader
	long checksum;

	// whether the machine is online or offline
	// 0 for an uninitialized value
	// MACHINE_IS_UP if machine is online
	// MACHINE_IS_DOWN if machine is offline
	int machines_state[MAX_MACHINES];

	// timestamp for when the machine was marked as up (online)
	// used for calculating the uptime
	unsigned machines_online_since[MAX_MACHINES];

	// timestamp of the last status update read from machines
	// 0 is uninitialized, starting value
	unsigned machines_last_updated[MAX_MACHINES];

	// average across the machines
	int avg_procs;
	float avg_lf;
	int avg_pps;
	int avg_dps;
};

//***********************************************************
// SHARED STRUCURE
// This is the data structure shared between all processes.
// it usses the previous three
// a pointer will be passed to functions that use the shared
// data.

struct shared_segment { // structure used for the allocated shared memory
    // synchronization fields
    // number of running monitors
    int numMonitors;
    // number of monitors currently in the shared buffer
    int monitorCount;

    // monitor/summarizer/printer fields

    // checksum seed used by reader and monitors for generating checksums
    int checksum_seed;
    // summary information of all monitored machines
    struct summary_info summary;

    // the status of the individual machines.
    struct statusNode machine_stats[MAX_MACHINES];

};

//---------------------------------
// thread parameter structures
// these are used to pass data to each of the threads
// when they are created.
//---------------------------------

// used for each monitor thread
struct monitor_thread_info {
	pthread_t thread_id;
	struct shared_segment * shmemptr;
	int machine_number;
};
 
struct reader_thread_param {
	struct shared_segment * shmemptr;
	int num_machines;
};

struct printer_thread_param {
	struct shared_segment * shmemptr; // pointer 
	int print_period; // print period in ms
        int num_machines;

};

// thread parameters used for easily creating multiple monitors in lab2main.c.main()


// ALREADY DEFINED FUNCTIONS -----------------------------------------------------------------------------------

#define CONSOLE_DEFAULT "\033[0m" // console colour codes
#define CONSOLE_RED "\033[1;31m"
#define CONSOLE_YELLOW "\033[0;33m"
#define CONSOLE_GREEN "\033[0;32m"
#define CONSOLE_PURPLE "\033[0;35m"
#define CONSOLE_CYAN "\033[0;36m"
#define CONSOLE_WHITE "\033[0;37m"

// utility functions
void testLog(char e, const char * format, ...);
void threadLog(char e, const char * format, ...);
void colourMsg(char e, const char * colour, const char * format, ...);

// console functions
void set_colour(const char * colour_code);
void reset_colour();
void as_log(char e, const char * colour_code);
void end_log();


// time functions
void msleep(unsigned int tms);
unsigned get_current_unix_time();

// random functions
//void seed_random();
int rand_lim(int start, int end, int step);

// checksum functions
int gen_checksum_seed();
long init_checksum (int checksum_seed, int machine_id , unsigned timestamp);
long make_checksum ( long checksum, int machine_id, unsigned timestamp, unsigned long long iterations);
long gen_summary_checksum();
long status_checksum(int checksum_seed, int machine_id,unsigned timestamp);

//summarizer.c, monitor.c and lab2main.c functions
int monitor_function(int machine_number, struct shared_segment * shmemptr );
//void gen_machine_fname_str( char ** ptr_to_char_ptr , int number);
//int get_total_status_entries(int monitors);
void * monitor_thread_func( void * p );
void * reader_thread_func ( void * p );
void * printer_thread_func ( void * p);
void * status_printer_thread_func ( void * p );

extern sem_t * access_stats;
extern sem_t * access_summary;
extern sem_t * mutex;

//--------------------------------------------------------
// FUNCTIONS FOR STUDENTS TO IMPLEMENT (in lab2funcs.c) --
//--------------------------------------------------------
void init_shared( struct shared_segment * shmemptr );
void monitor_update_status_entry(int machine_id, int status_id, struct status * cur_read_stat_ptr, struct shared_segment * shmemptr );
void status_printer( int status_count, struct shared_segment * shmemptr);
void search_and_read_entries(int status_count, struct shared_segment * shmemptr);
void print_summary_periodically(struct shared_segment * shmemptr, int period);

